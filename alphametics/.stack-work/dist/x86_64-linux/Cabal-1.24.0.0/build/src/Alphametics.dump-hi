
==================== FINAL INTERFACE ====================
2017-02-01 15:22:36.348835 UTC

interface alphametics-0.0.0-GJUXwytE1RdCS5OmxpDLY0:Alphametics 8001
  interface hash: 0da15ea3e409b0251941825e36bb027a
  ABI hash: 3ac3d831c4c5d40e8790c34377534ccd
  export-list hash: 8ca82a6784b607521ab7986e6143e424
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Alphametics.solve
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Arrow 29ee70aef11b50f3bae1135acf073ed5
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 2597c3599012c0fa55c30f93a0324f00
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL :: GHC.Base.Alternative (Alphametics.StateL s)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Alphametics.StateL s)
                  (Alphametics.$fApplicativeStateL @ s)
                  (Alphametics.$fAlternativeStateL_$cempty @ s)
                  (Alphametics.$fAlternativeStateL_$c<|> @ s)
                  (Alphametics.$fAlternativeStateL_$csome @ s)
                  (Alphametics.$fAlternativeStateL_$cmany @ s) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL1 :: Alphametics.StateL s a -> s -> [([a], s)]
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: (\ @ s
                   @ a
                   (eta :: Alphametics.StateL s a)
                   (eta1 :: s) ->
                 let {
                   as :: s -> [([a] -> [a], s)] {- Arity: 1, Strictness: <L,U> -}
                   = \ (eta2 :: s) ->
                     GHC.Base.map
                       @ (a, s)
                       @ ([a] -> [a], s)
                       (Alphametics.$fAlternativeStateL3 @ a @ s)
                       (eta `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) eta2)
                 } in
                 letrec {
                   many_v :: s -> [([a], s)] {- Arity: 1, Strictness: <L,U> -}
                   = \ (s1 :: s) ->
                     GHC.Base.++
                       @ ([a], s)
                       (Alphametics.$fAlternativeStateL2
                          @ s
                          @ [a]
                          @ [a]
                          as `cast` (Sym (Alphametics.N:StateL[0] <s>_R <[a] -> [a]>_R))
                          many_v `cast` (Sym (Alphametics.N:StateL[0] <s>_R <[a]>_R))
                          s1)
                       (GHC.Types.:
                          @ ([a], s)
                          (GHC.Types.[] @ a, s1)
                          (GHC.Types.[] @ ([a], s)))
                 } in
                 many_v eta1) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL2 ::
    Alphametics.StateL s (a -> b)
    -> Alphametics.StateL s a -> s -> [(b, s)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ s
                   @ a
                   @ b
                   (fs :: Alphametics.StateL s (a -> b))
                   (xs :: Alphametics.StateL s a)
                   (s1 :: s) ->
                 let {
                   lvl14 :: [(a, s)]
                   = xs `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) s1
                 } in
                 letrec {
                   go3 :: [(a -> b, s)] -> [(b, s)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(a -> b, s)]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (b, s)
                       : y ys
                       -> case y of wild1 { (,) f s' ->
                          let {
                            z :: [(b, s)] = go3 ys
                          } in
                          letrec {
                            go4 :: [(a, s)] -> [(b, s)] {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [(a, s)]) ->
                              case ds1 of wild2 {
                                [] -> z
                                : y1 ys1
                                -> case y1 of wild3 { (,) a1 s'' ->
                                   GHC.Types.: @ (b, s) (f a1, s'') (go4 ys1) } }
                          } in
                          go4 lvl14 } }
                 } in
                 go3 (fs `cast` (Alphametics.N:StateL[0] <s>_R <a -> b>_R) s1)) -}
d5c6d0859f2483b189fc27d46260fbc0
  $fAlternativeStateL3 :: (a, s) -> ([a] -> [a], s)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a @ s (ds :: (a, s)) ->
                 (GHC.Types.: @ a (case ds of wild { (,) x y -> x }),
                  case ds of wild { (,) x y -> y })) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL4 :: Alphametics.StateL s a -> s -> [([a], s)]
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: (\ @ s
                   @ a
                   (eta :: Alphametics.StateL s a)
                   (eta1 :: s) ->
                 let {
                   some_v :: s -> [([a] -> [a], s)] {- Arity: 1, Strictness: <L,U> -}
                   = \ (eta2 :: s) ->
                     GHC.Base.map
                       @ (a, s)
                       @ ([a] -> [a], s)
                       (Alphametics.$fAlternativeStateL3 @ a @ s)
                       (eta `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) eta2)
                 } in
                 letrec {
                   some_v1 :: s -> [([a], s)] {- Arity: 1, Strictness: <L,U> -}
                   = \ (s1 :: s) ->
                     GHC.Base.++
                       @ ([a], s)
                       (Alphametics.$fAlternativeStateL2
                          @ s
                          @ [a]
                          @ [a]
                          some_v `cast` (Sym (Alphametics.N:StateL[0] <s>_R <[a] -> [a]>_R))
                          some_v1 `cast` (Sym (Alphametics.N:StateL[0] <s>_R <[a]>_R))
                          s1)
                       (GHC.Types.:
                          @ ([a], s)
                          (GHC.Types.[] @ a, s1)
                          (GHC.Types.[] @ ([a], s)))
                 } in
                 Alphametics.$fAlternativeStateL2
                   @ s
                   @ [a]
                   @ [a]
                   some_v `cast` (Sym (Alphametics.N:StateL[0] <s>_R <[a] -> [a]>_R))
                   some_v1 `cast` (Sym (Alphametics.N:StateL[0] <s>_R <[a]>_R))
                   eta1) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL5 ::
    Alphametics.StateL s a -> Alphametics.StateL s a -> s -> [(a, s)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a
                   (as :: Alphametics.StateL s a)
                   (bs :: Alphametics.StateL s a)
                   (s1 :: s) ->
                 GHC.Base.augment
                   @ (a, s)
                   (\ @ b (c :: (a, s) -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ (a, s)
                      @ b
                      c
                      n
                      (as `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) s1))
                   (bs `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) s1)) -}
1fa2617876f910f1e39de0db597ce336
  $fAlternativeStateL6 :: s -> [(a, s)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ s @ a (ds :: s) -> GHC.Types.[] @ (a, s)) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL_$c<|> ::
    Alphametics.StateL s a
    -> Alphametics.StateL s a -> Alphametics.StateL s a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fAlternativeStateL5
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <Alphametics.StateL s a>_R
                 ->_R <Alphametics.StateL s a>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <a>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL_$cempty :: Alphametics.StateL s a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fAlternativeStateL6
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 Sym (Alphametics.N:StateL[0] <s>_R <a>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL_$cmany ::
    Alphametics.StateL s a -> Alphametics.StateL s [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fAlternativeStateL1
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <Alphametics.StateL s a>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <[a]>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fAlternativeStateL_$csome ::
    Alphametics.StateL s a -> Alphametics.StateL s [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fAlternativeStateL4
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <Alphametics.StateL s a>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <[a]>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fApplicativeStateL :: GHC.Base.Applicative (Alphametics.StateL s)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Alphametics.StateL s)
                  (Alphametics.$fFunctorStateL @ s)
                  (Alphametics.$fApplicativeStateL_$cpure @ s)
                  (Alphametics.$fApplicativeStateL_$c<*> @ s)
                  (Alphametics.$fApplicativeStateL_$c*> @ s)
                  (Alphametics.$fApplicativeStateL_$c<* @ s) -}
680843040c53c1c20e64e28ee6268e12
  $fApplicativeStateL1 ::
    Alphametics.StateL s a -> Alphametics.StateL s b -> s -> [(a, s)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ s
                   @ a
                   @ b
                   (eta :: Alphametics.StateL s a)
                   (eta1 :: Alphametics.StateL s b)
                   (eta2 :: s) ->
                 Alphametics.$fAlternativeStateL2
                   @ s
                   @ b
                   @ a
                   (\ (eta3 :: s)[OneShot] ->
                    GHC.Base.map
                      @ (a, s)
                      @ (b -> a, s)
                      (Alphametics.$fApplicativeStateL2 @ b @ a @ s)
                      (eta `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) eta3))
                     `cast`
                   (Sym (Alphametics.N:StateL[0] <s>_R <b -> a>_R))
                   eta1
                   eta2) -}
abf599e857524d505132c87a6fb4e1fc
  $fApplicativeStateL2 :: (a, s) -> (b -> a, s)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ b @ a @ s (ds :: (a, s)) ->
                 (let {
                    x :: a = case ds of wild { (,) x1 y -> x1 }
                  } in
                  \ (ds1 :: b) -> x,
                  case ds of wild { (,) x y -> y })) -}
680843040c53c1c20e64e28ee6268e12
  $fApplicativeStateL3 ::
    Alphametics.StateL s a -> Alphametics.StateL s b -> s -> [(b, s)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ s
                   @ a
                   @ b
                   (eta :: Alphametics.StateL s a)
                   (eta1 :: Alphametics.StateL s b)
                   (eta2 :: s) ->
                 Alphametics.$fAlternativeStateL2
                   @ s
                   @ b
                   @ b
                   (\ (eta3 :: s)[OneShot] ->
                    GHC.Base.map
                      @ (a, s)
                      @ (b -> b, s)
                      (Alphametics.$fApplicativeStateL4 @ b @ a @ s)
                      (eta `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) eta3))
                     `cast`
                   (Sym (Alphametics.N:StateL[0] <s>_R <b -> b>_R))
                   eta1
                   eta2) -}
f3feb566a6c62854c062882db266878e
  $fApplicativeStateL4 :: (a, s) -> (b -> b, s)
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ b @ a @ s (ds :: (a, s)) ->
                 (Alphametics.$fApplicativeStateL5 @ b,
                  case ds of wild { (,) x y -> y })) -}
1bfd3da4de68f64ba8b455332efcd887
  $fApplicativeStateL5 :: b -> b
  {- Arity: 1, HasNoCafRefs, Unfolding: (\ @ b (eta :: b) -> eta) -}
09dadfe7fd069d878068e8a87f7ed78a
  $fApplicativeStateL6 :: a -> s -> [(a, s)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ s @ a (x :: a) (s1 :: s) ->
                 GHC.Types.: @ (a, s) (x, s1) (GHC.Types.[] @ (a, s))) -}
680843040c53c1c20e64e28ee6268e12
  $fApplicativeStateL_$c*> ::
    Alphametics.StateL s a
    -> Alphametics.StateL s b -> Alphametics.StateL s b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fApplicativeStateL3
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Alphametics.StateL s a>_R
                 ->_R <Alphametics.StateL s b>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <b>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fApplicativeStateL_$c<* ::
    Alphametics.StateL s a
    -> Alphametics.StateL s b -> Alphametics.StateL s a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fApplicativeStateL1
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Alphametics.StateL s a>_R
                 ->_R <Alphametics.StateL s b>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <a>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fApplicativeStateL_$c<*> ::
    Alphametics.StateL s (a -> b)
    -> Alphametics.StateL s a -> Alphametics.StateL s b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fAlternativeStateL2
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Alphametics.StateL s (a -> b)>_R
                 ->_R <Alphametics.StateL s a>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <b>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fApplicativeStateL_$cpure :: a -> Alphametics.StateL s a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fApplicativeStateL6
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R ->_R Sym (Alphametics.N:StateL[0] <s>_R <a>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fFunctorStateL :: GHC.Base.Functor (Alphametics.StateL s)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Alphametics.StateL s)
                  (Alphametics.$fFunctorStateL_$cfmap @ s)
                  (Alphametics.$fFunctorStateL_$c<$ @ s) -}
680843040c53c1c20e64e28ee6268e12
  $fFunctorStateL1 :: a -> Alphametics.StateL s b -> s -> [(a, s)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Alphametics.StateL s b)
                   (eta2 :: s) ->
                 GHC.Base.build
                   @ (a, s)
                   (\ @ b1 (c :: (a, s) -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (b, s)
                      @ b1
                      (GHC.Base.mapFB
                         @ (a, s)
                         @ b1
                         @ (b, s)
                         c
                         (\ (ds :: (b, s)) -> (eta, case ds of wild { (,) x y -> y })))
                      n
                      (eta1 `cast` (Alphametics.N:StateL[0] <s>_R <b>_R) eta2))) -}
680843040c53c1c20e64e28ee6268e12
  $fFunctorStateL2 ::
    (a -> b) -> Alphametics.StateL s a -> s -> [(b, s)]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Alphametics.StateL s a)
                   (eta :: s) ->
                 GHC.Base.build
                   @ (b, s)
                   (\ @ b1 (c :: (b, s) -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (a, s)
                      @ b1
                      (GHC.Base.mapFB
                         @ (b, s)
                         @ b1
                         @ (a, s)
                         c
                         (Control.Arrow.$fArrow(->)_$cfirst @ a @ b @ s f))
                      n
                      (ds `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) eta))) -}
680843040c53c1c20e64e28ee6268e12
  $fFunctorStateL_$c<$ ::
    a -> Alphametics.StateL s b -> Alphametics.StateL s a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fFunctorStateL1
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Alphametics.StateL s b>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <a>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fFunctorStateL_$cfmap ::
    (a -> b) -> Alphametics.StateL s a -> Alphametics.StateL s b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fFunctorStateL2
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Alphametics.StateL s a>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <b>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fMonadPlusStateL :: GHC.Base.MonadPlus (Alphametics.StateL s)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Alphametics.StateL s)
                  (Alphametics.$fAlternativeStateL @ s)
                  (Alphametics.$fMonadStateL @ s)
                  (Alphametics.$fAlternativeStateL_$cempty @ s)
                  (Alphametics.$fAlternativeStateL_$c<|> @ s) -}
680843040c53c1c20e64e28ee6268e12
  $fMonadStateL :: GHC.Base.Monad (Alphametics.StateL s)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Alphametics.StateL s)
                  (Alphametics.$fApplicativeStateL @ s)
                  (Alphametics.$fMonadStateL_$c>>= @ s)
                  (Alphametics.$fMonadStateL_$c>> @ s)
                  (Alphametics.$fApplicativeStateL_$cpure @ s)
                  (Alphametics.$fMonadStateL_$cfail @ s) -}
680843040c53c1c20e64e28ee6268e12
  $fMonadStateL1 ::
    Alphametics.StateL s a
    -> (a -> Alphametics.StateL s b) -> s -> [(b, s)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(C1(U))><L,U>,
     Unfolding: (\ @ s
                   @ a
                   @ b
                   (ds :: Alphametics.StateL s a)
                   (k :: a -> Alphametics.StateL s b)
                   (s1 :: s) ->
                 letrec {
                   go3 :: [(a, s)] -> [(b, s)] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(a, s)]) ->
                     case ds1 of wild {
                       [] -> GHC.Types.[] @ (b, s)
                       : y ys
                       -> case y of wild1 { (,) a1 s' ->
                          let {
                            z :: [(b, s)] = go3 ys
                          } in
                          letrec {
                            go4 :: [(b, s)] -> [(b, s)] {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds2 :: [(b, s)]) ->
                              case ds2 of wild2 {
                                [] -> z
                                : y1 ys1
                                -> case y1 of wild3 { (,) b1 s'' ->
                                   GHC.Types.: @ (b, s) wild3 (go4 ys1) } }
                          } in
                          go4 ((k a1) `cast` (Alphametics.N:StateL[0] <s>_R <b>_R) s') } }
                 } in
                 go3 (ds `cast` (Alphametics.N:StateL[0] <s>_R <a>_R) s1)) -}
680843040c53c1c20e64e28ee6268e12
  $fMonadStateL_$c>> ::
    Alphametics.StateL s a
    -> Alphametics.StateL s b -> Alphametics.StateL s b
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Alphametics.StateL s a)
                   (k :: Alphametics.StateL s b)
                   (eta :: s) ->
                 (Alphametics.$fMonadStateL_$c>>= @ s @ a @ b m1 (\ (ds :: a) -> k))
                   `cast`
                 (Alphametics.N:StateL[0] <s>_R <b>_R)
                   eta)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Alphametics.StateL s a>_R
                 ->_R <Alphametics.StateL s b>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <b>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fMonadStateL_$c>>= ::
    Alphametics.StateL s a
    -> (a -> Alphametics.StateL s b) -> Alphametics.StateL s b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,C(C1(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Alphametics.$fMonadStateL1
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Alphametics.StateL s a>_R
                 ->_R <a -> Alphametics.StateL s b>_R
                 ->_R Sym (Alphametics.N:StateL[0] <s>_R <b>_R)) -}
680843040c53c1c20e64e28ee6268e12
  $fMonadStateL_$cfail :: GHC.Base.String -> Alphametics.StateL s a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (1, True, True)
                (\ @ s @ a (s1 :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.PtrRepLifted
                   @ (Alphametics.StateL s a)
                   s1) -}
bde4d20629375c774385c4adbdf8e3da
  $sinsert_$sgo4 ::
    GHC.Types.Char
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: GHC.Types.Char)
                   (w1 :: a1)
                   (w2 :: Data.Map.Base.Map GHC.Types.Char a1) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 Alphametics.$w$sgo4 @ a1 ww1 w1 w2 }) -}
d5d894bb3b15d283aa4fa92ddb3d3b63
  $tc'StateL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6497523602008609497##
                   12524937597084637070##
                   Alphametics.$trModule
                   Alphametics.$tc'StateL1) -}
e7c0b0d0b5f2e7a0b7d7428f2c2127a4
  $tc'StateL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StateL"#) -}
4d12ebc1204d9fe92419c7ed017ed3d9
  $tcStateL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5050994123544585054##
                   18186507420466412724##
                   Alphametics.$trModule
                   Alphametics.$tcStateL1) -}
8da8ad85979531a54801040ad93e8b47
  $tcStateL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StateL"#) -}
576777de0632b2d5469e6894ef0400ae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Alphametics.$trModule2
                   Alphametics.$trModule1) -}
cfaea7a71723cc99927c9328c53bfe5a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Alphametics"#) -}
171c9c7aec5382a6ff7eae74e5a48898
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "alphametics-0.0.0-GJUXwytE1RdCS5OmxpDLY0"#) -}
f1bce3d3b4592b6847eddda3b5481151
  $w$sgo4 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
9ba0c0cb06566783aa559318265c2472
  $wpoly_go10 ::
    GHC.Prim.Char#
    -> Data.Map.Base.Map GHC.Types.Char a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
680843040c53c1c20e64e28ee6268e12
  newtype StateL s a = StateL (s -> [(a, s)])
7596b043b53cc98a9234d8d3fabada95
  solve ::
    GHC.Base.String -> GHC.Base.Maybe [(GHC.Types.Char, GHC.Types.Int)]
  {- Arity: 1, Strictness: <L,U> -}
instance [safe] GHC.Base.Alternative [Alphametics.StateL]
  = Alphametics.$fAlternativeStateL
instance [safe] GHC.Base.Applicative [Alphametics.StateL]
  = Alphametics.$fApplicativeStateL
instance [safe] GHC.Base.Functor [Alphametics.StateL]
  = Alphametics.$fFunctorStateL
instance [safe] GHC.Base.MonadPlus [Alphametics.StateL]
  = Alphametics.$fMonadPlusStateL
instance [safe] GHC.Base.Monad [Alphametics.StateL]
  = Alphametics.$fMonadStateL
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False



==================== FINAL INTERFACE ====================
2017-02-03 11:51:21.968774 UTC

interface dominoes-0.0.0-KGj34XgiAdLI1zVO9rksYS:Dominoes 8001
  interface hash: 714548a7cd8aac8e72038b37b73c5d84
  ABI hash: 9790ca482c0b6c96b7a2ddcee21c2b47
  export-list hash: 46a60f82468bb680cad6e65a90a040a8
  orphan hash: a853509cf95b1d05f35d9d56938a72c0
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Dominoes.chain
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Tree c55e89501795ec198627b7ac73aa0d66
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
ded52806c307e02f09309d05bda8af4d
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt) -}
634a97032597a4787970c523a4f5857f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Dominoes.$trModule2
                   Dominoes.$trModule1) -}
55f40fccf9331ccb682fda759c7a7056
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Dominoes"#) -}
663dfdd72856fdb5c66a7aa66aa6dc9e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "dominoes-0.0.0-KGj34XgiAdLI1zVO9rksYS"#) -}
427774cafa4404b754caded7d5321a94
  $wlongestChain ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Tree.Forest (GHC.Types.Int, GHC.Types.Int)
    -> (# GHC.Types.Bool, [(GHC.Types.Int, GHC.Types.Int)] #)
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><S,U>, Inline: [0] -}
dc030c6e32a34085ddef0b0bc7eb838b
  $wlvl ::
    (GHC.Types.Int, GHC.Types.Int)
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> (# (GHC.Types.Int, GHC.Types.Int),
          [((GHC.Types.Int, GHC.Types.Int),
            [(GHC.Types.Int, GHC.Types.Int)])] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: (GHC.Types.Int, GHC.Types.Int))
                   (ww1 :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 (# ww,
                    let {
                      x :: GHC.Types.Int = case ww of wild { (,) ds1 y -> y }
                    } in
                    let {
                      c :: (GHC.Types.Int, GHC.Types.Int)
                           -> [((GHC.Types.Int, GHC.Types.Int),
                                [(GHC.Types.Int, GHC.Types.Int)])]
                           -> [((GHC.Types.Int, GHC.Types.Int),
                                [(GHC.Types.Int, GHC.Types.Int)])]
                        {- Arity: 2, Strictness: <L,1*U(1*U(U),U)><L,U> -}
                      = \ (x1 :: (GHC.Types.Int, GHC.Types.Int))
                          (ys :: [((GHC.Types.Int, GHC.Types.Int),
                                   [(GHC.Types.Int, GHC.Types.Int)])])[OneShot] ->
                        GHC.Types.:
                          @ ((GHC.Types.Int, GHC.Types.Int),
                             [(GHC.Types.Int, GHC.Types.Int)])
                          (let {
                             a :: (GHC.Types.Int, GHC.Types.Int)
                             = case x1 of wild { (,) a1 b ->
                               case a1 of wild1 { GHC.Types.I# x2 ->
                               case x of wild2 { GHC.Types.I# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# x2 y) of wild3 {
                                 GHC.Types.False -> (b, wild1) GHC.Types.True -> wild } } } }
                           } in
                           (a,
                            Data.OldList.\\
                              @ (GHC.Types.Int, GHC.Types.Int)
                              Dominoes.$s$fEq(,)
                              (Data.OldList.\\
                                 @ (GHC.Types.Int, GHC.Types.Int)
                                 Dominoes.$s$fEq(,)
                                 ww1
                                 (GHC.Types.:
                                    @ (GHC.Types.Int, GHC.Types.Int)
                                    a
                                    (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))))
                              (GHC.Types.:
                                 @ (GHC.Types.Int, GHC.Types.Int)
                                 (Data.Tuple.swap @ GHC.Types.Int @ GHC.Types.Int a)
                                 (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int)))))
                          ys
                    } in
                    letrec {
                      go1 :: [(GHC.Types.Int, GHC.Types.Int)]
                             -> [((GHC.Types.Int, GHC.Types.Int),
                                  [(GHC.Types.Int, GHC.Types.Int)])]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                        case ds of wild {
                          []
                          -> GHC.Types.[]
                               @ ((GHC.Types.Int, GHC.Types.Int),
                                  [(GHC.Types.Int, GHC.Types.Int)])
                          : y ys
                          -> case y of wild1 { (,) a b ->
                             case a of wild2 { GHC.Types.I# x1 ->
                             case x of wild3 { GHC.Types.I# y1 ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild4 {
                               GHC.Types.False
                               -> case b of wild5 { GHC.Types.I# x2 ->
                                  case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.==# x2 y1) of wild6 {
                                    GHC.Types.False -> go1 ys GHC.Types.True -> c wild1 (go1 ys) } }
                               GHC.Types.True -> c wild1 (go1 ys) } } } } }
                    } in
                    go1 ww1 #)) -}
3c24cb28fa352c621749bd827bcffac9
  chain ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Base.Maybe [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 case ds of wild {
                   [] -> Dominoes.chain3
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) a b ->
                      let {
                        fail :: GHC.Prim.Void#
                                -> GHC.Base.Maybe [(GHC.Types.Int, GHC.Types.Int)]
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                          let {
                            w :: Data.Tree.Tree (GHC.Types.Int, GHC.Types.Int)
                            = case Data.Tree.$wunfoldTree
                                     @ ((GHC.Types.Int, GHC.Types.Int),
                                        [(GHC.Types.Int, GHC.Types.Int)])
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     Dominoes.chain2
                                     (wild1, ds2) of ww { (#,#) ww1 ww2 ->
                              Data.Tree.Node @ (GHC.Types.Int, GHC.Types.Int) ww1 ww2 }
                          } in
                          case GHC.List.$wlenAcc
                                 @ [(GHC.Types.Int, GHC.Types.Int)]
                                 (Data.Tree.levels_$spoly_go
                                    @ (GHC.Types.Int, GHC.Types.Int)
                                    w
                                    (GHC.Types.[]
                                       @ (Data.Tree.Tree (GHC.Types.Int, GHC.Types.Int))))
                                 0# of ww2 { DEFAULT ->
                          case GHC.List.$wlenAcc
                                 @ (GHC.Types.Int, GHC.Types.Int)
                                 wild
                                 0# of ww1 { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww2 ww1) of wild2 {
                            GHC.Types.False
                            -> GHC.Base.Nothing @ [(GHC.Types.Int, GHC.Types.Int)]
                            GHC.Types.True
                            -> case GHC.List.elem
                                      @ GHC.Types.Int
                                      GHC.Classes.$fEqInt
                                      (case w of wild3 { Data.Tree.Node ds4 ds5 ->
                                       case ds4 of wild4 { (,) x ds6 -> x } })
                                      (GHC.Base.map
                                         @ (GHC.Types.Int, GHC.Types.Int)
                                         @ GHC.Types.Int
                                         (Data.Tuple.snd @ GHC.Types.Int @ GHC.Types.Int)
                                         (GHC.List.$w!!
                                            @ [(GHC.Types.Int, GHC.Types.Int)]
                                            (Data.Tree.levels_$spoly_go
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               w
                                               (GHC.Types.[]
                                                  @ (Data.Tree.Tree
                                                       (GHC.Types.Int, GHC.Types.Int))))
                                            (GHC.Prim.-# ww2 1#))) of wild3 {
                                 GHC.Types.False
                                 -> GHC.Base.Nothing @ [(GHC.Types.Int, GHC.Types.Int)]
                                 GHC.Types.True
                                 -> GHC.Base.Just
                                      @ [(GHC.Types.Int, GHC.Types.Int)]
                                      (case w of ww { Data.Tree.Node ww3 ww4 ->
                                       case Dominoes.$wlongestChain
                                              Dominoes.chain1
                                              (GHC.Types.I# (GHC.Prim.-# ww2 1#))
                                              ww3
                                              ww4 of ww5 { (#,#) ww6 ww7 ->
                                       ww7 } }) } } } }
                      } in
                      case ds2 of wild2 {
                        []
                        -> case a of wild3 { GHC.Types.I# x ->
                           case b of wild4 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild5 {
                             GHC.Types.False -> fail GHC.Prim.void#
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ [(GHC.Types.Int, GHC.Types.Int)]
                                  (GHC.Types.:
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     wild1
                                     (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) } } }
                        : ipv ipv1 -> fail GHC.Prim.void# } } }) -}
66ce4461ed0b9ae65412d8f756d22b07
  chain1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c56b7d4f8a817f4947c50f49b3f29f54
  chain2 ::
    ((GHC.Types.Int, GHC.Types.Int), [(GHC.Types.Int, GHC.Types.Int)])
    -> ((GHC.Types.Int, GHC.Types.Int),
        [((GHC.Types.Int, GHC.Types.Int),
          [(GHC.Types.Int, GHC.Types.Int)])])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U,U(U)),U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ((GHC.Types.Int, GHC.Types.Int),
                          [(GHC.Types.Int, GHC.Types.Int)])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Dominoes.$wlvl ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
dadf1123664f045bb0b9ae754551ebe2
  chain3 :: GHC.Base.Maybe [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
"SPEC/Dominoes $fEq(,) @ Int @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                               GHC.Types.Int)
                                                    ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int $dEq $dEq1
  = Dominoes.$s$fEq(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False


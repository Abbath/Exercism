
==================== FINAL INTERFACE ====================
2017-02-02 19:30:56.806252 UTC

interface bowling-0.0.0-8c9T8Bt3o2H6123g8iYJ1B:Bowling 8001
  interface hash: 72cfeaa1129b214473cbadcfd874e045
  ABI hash: efff4323892436234edf041917ca5ddb
  export-list hash: a846221ffca19b447cd941da97c0fa85
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e79dbfdd23fd6a1ccbb93838a2408970
  sig of: Nothing
  used TH splices: True
  where
exports:
  Bowling.score
  Bowling.BowlingError{Bowling.IncompleteGame Bowling.InvalidRoll rollIndex rollValue}
module dependencies:
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-CJpWsiXJdd89SnV9dZtTwc
                      adjunctions-4.3@adjunctions-4.3-4Ce41VL5vJQ2GHDuvBYOaY
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      comonad-5@comonad-5-K67oBSM48Vd3lLCWoA5wEU
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-KSQE31a7FruKHDlp90hIUT
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.1@distributive-0.5.1-5St8fnipE6nCxzbgGHU2c
                      exceptions-0.8.3@exceptions-0.8.3-7py7fmRxowDFpHmiHGKrTb
                      free-4.12.4@free-4.12.4-1ITnOV9d7sz5LQd0ol851m
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.1@kan-extensions-5.0.1-YMPsMkdoFrIOKXDGVJXnE
                      lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-FAyB4iuuM7cHXdrLMZtdXq
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      profunctors-5.2@profunctors-5.2-Ltg66QzYP4ABnjg0OCT67L
                      reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9
                      semigroupoids-5.1@semigroupoids-5.1-8D9MOHoStth3k6tqgg3LJf
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-2FShXByu6KdBz0M9aQqvS3
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-J1ZzlxijzaHGRixYxgxlf9:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-4Ce41VL5vJQ2GHDuvBYOaY:Data.Functor.Rep
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-BPeqTGtW23n6LN2XFkdV:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-YMPsMkdoFrIOKXDGVJXnE:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-YMPsMkdoFrIOKXDGVJXnE:Data.Functor.Yoneda
                         lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.At
                         lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Internal.Indexed
                         lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Reified
                         lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Tuple
                         lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Wrapped
                         lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-Ltg66QzYP4ABnjg0OCT67L:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-2FShXByu6KdBz0M9aQqvS3:Data.HashMap.Base
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-2FShXByu6KdBz0M9aQqvS3:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens a1de5ddba00f4dd598edc1f2c595818f
import  -/  lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Getter 4a2127a440a8e6ed5be83ce377ed7dbc
import  -/  lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Setter 0117ebcb1a855a9903445d7ea5bd7ef4
import  -/  lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.TH 32a18367942a1a25b262c94944edeef8
import  -/  lens-4.14@lens-4.14-JpTSnP1OzYyKpQqwE2EIrq:Control.Lens.Type 531dea1e8e288a578770cd581db45a41
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State d851912d62cbc95e043a9cc13c3581de
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 16a585e7f12cd771300b3cab638df233
0a36e41af989f0d524ac7aeae019105e
  $fEqBowlingError :: GHC.Classes.Eq Bowling.BowlingError
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Bowling.BowlingError
                  Bowling.$fEqBowlingError_$c==
                  Bowling.$fEqBowlingError_$c/= -}
0a36e41af989f0d524ac7aeae019105e
  $fEqBowlingError_$c/= ::
    Bowling.BowlingError -> Bowling.BowlingError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Bowling.BowlingError)
                   (b :: Bowling.BowlingError) ->
                 case a of wild {
                   Bowling.IncompleteGame
                   -> case b of wild1 {
                        Bowling.IncompleteGame -> GHC.Types.False
                        Bowling.InvalidRoll ipv ipv1 -> GHC.Types.True }
                   Bowling.InvalidRoll a1 a2
                   -> case b of wild1 {
                        Bowling.IncompleteGame -> GHC.Types.True
                        Bowling.InvalidRoll b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b2 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case a2 of wild5 { GHC.Types.I# x1 ->
                                case b3 of wild6 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild7 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } } }) -}
0a36e41af989f0d524ac7aeae019105e
  $fEqBowlingError_$c== ::
    Bowling.BowlingError -> Bowling.BowlingError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Bowling.BowlingError)
                   (ds1 :: Bowling.BowlingError) ->
                 case ds of wild {
                   Bowling.IncompleteGame
                   -> case ds1 of wild1 {
                        Bowling.IncompleteGame -> GHC.Types.True
                        Bowling.InvalidRoll ipv ipv1 -> GHC.Types.False }
                   Bowling.InvalidRoll a1 a2
                   -> case ds1 of wild1 {
                        Bowling.IncompleteGame -> GHC.Types.False
                        Bowling.InvalidRoll b2 b3
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b2 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a2 b3 } } } } }) -}
1da7d757cf5049360717e566f70ec3f0
  $fEqInnerState :: GHC.Classes.Eq Bowling.InnerState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Bowling.InnerState
                  Bowling.$fEqInnerState_$c==
                  Bowling.$fEqInnerState_$c/= -}
1da7d757cf5049360717e566f70ec3f0
  $fEqInnerState_$c/= ::
    Bowling.InnerState -> Bowling.InnerState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U(U))><S(SLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Bowling.InnerState) (b :: Bowling.InnerState) ->
                 case Bowling.$fEqInnerState_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1da7d757cf5049360717e566f70ec3f0
  $fEqInnerState_$c== ::
    Bowling.InnerState -> Bowling.InnerState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U(U))><S(SLLLLLLL),1*U(1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Bowling.InnerState) (w1 :: Bowling.InnerState) ->
                 case w of ww { Bowling.IS ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Bowling.IS ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Bowling.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
0a36e41af989f0d524ac7aeae019105e
  $fShowBowlingError :: GHC.Show.Show Bowling.BowlingError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Bowling.BowlingError
                  Bowling.$fShowBowlingError_$cshowsPrec
                  Bowling.$fShowBowlingError_$cshow
                  Bowling.$fShowBowlingError_$cshowList -}
0a36e41af989f0d524ac7aeae019105e
  $fShowBowlingError1 :: Bowling.BowlingError -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Bowling.$fShowBowlingError_$cshowsPrec
                   Bowling.$fShowBowlingError2) -}
e6869850d6910e31313d8e433068ade0
  $fShowBowlingError2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0f92dac50d9dce2a7640539283648407
  $fShowBowlingError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InvalidRoll {"#) -}
5bd8c01f0408c45d3ac0920a9f11b636
  $fShowBowlingError4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
6880d1ccfe70dd8c0710c53dbe08d2f8
  $fShowBowlingError5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rollValue = "#) -}
12483eb99c0f92e3c5f0d9db95711ba5
  $fShowBowlingError6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
54e21b8303ba03469b3f194c7bb4b351
  $fShowBowlingError7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rollIndex = "#) -}
c9027a653a821c26d578f47936a98e6e
  $fShowBowlingError8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IncompleteGame"#) -}
0a36e41af989f0d524ac7aeae019105e
  $fShowBowlingError_$cshow ::
    Bowling.BowlingError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Bowling.BowlingError) ->
                 Bowling.$fShowBowlingError_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0a36e41af989f0d524ac7aeae019105e
  $fShowBowlingError_$cshowList ::
    [Bowling.BowlingError] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Bowling.BowlingError
                   Bowling.$fShowBowlingError1) -}
0a36e41af989f0d524ac7aeae019105e
  $fShowBowlingError_$cshowsPrec ::
    GHC.Types.Int -> Bowling.BowlingError -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Bowling.BowlingError)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Bowling.IncompleteGame
                   -> GHC.Base.++ @ GHC.Types.Char Bowling.$fShowBowlingError8 eta
                   Bowling.InvalidRoll b2 b3
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Bowling.$fShowBowlingError7
                            (case b2 of ww2 { GHC.Types.I# ww3 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    ww3
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       Bowling.$fShowBowlingError6
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          Bowling.$fShowBowlingError5
                                          (case b3 of ww1 { GHC.Types.I# ww5 ->
                                           case GHC.Show.$wshowSignedInt
                                                  0#
                                                  ww5
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Bowling.$fShowBowlingError4
                                                     x1) of ww4 { (#,#) ww6 ww7 ->
                                           GHC.Types.:
                                             @ GHC.Types.Char
                                             ww6
                                             ww7 } }))) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++ @ GHC.Types.Char Bowling.$fShowBowlingError3 (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Bowling.$fShowBowlingError3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
1da7d757cf5049360717e566f70ec3f0
  $fShowInnerState :: GHC.Show.Show Bowling.InnerState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Bowling.InnerState
                  Bowling.$fShowInnerState_$cshowsPrec
                  Bowling.$fShowInnerState_$cshow
                  Bowling.$fShowInnerState_$cshowList -}
1da7d757cf5049360717e566f70ec3f0
  $fShowInnerState1 :: Bowling.InnerState -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Bowling.InnerState) (w1 :: GHC.Base.String) ->
                 case w of ww { Bowling.IS ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Bowling.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 w1 }) -}
1da7d757cf5049360717e566f70ec3f0
  $fShowInnerState_$cshow :: Bowling.InnerState -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Bowling.InnerState) ->
                 Bowling.$fShowInnerState_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1da7d757cf5049360717e566f70ec3f0
  $fShowInnerState_$cshowList ::
    [Bowling.InnerState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Bowling.InnerState
                   Bowling.$fShowInnerState1) -}
1da7d757cf5049360717e566f70ec3f0
  $fShowInnerState_$cshowsPrec ::
    GHC.Types.Int -> Bowling.InnerState -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Bowling.InnerState)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Bowling.IS ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Bowling.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   w2 } }) -}
cf084b3e032dd0eb7350d40893f8b01e
  $tc'IS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2834161342974591853##
                   10562786528865735086##
                   Bowling.$trModule
                   Bowling.$tc'IS1) -}
f0b628672183e9b9ea52f07f7d598bdc
  $tc'IS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IS"#) -}
f8e67a841e43900fac5be2a1d8810c61
  $tc'IncompleteGame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18311572375886826495##
                   14083743805635845039##
                   Bowling.$trModule
                   Bowling.$tc'IncompleteGame1) -}
cc2fee56dc3cc7c569545a71a89bbec4
  $tc'IncompleteGame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IncompleteGame"#) -}
e18652686d2af53515b939ae3d8d15fa
  $tc'InvalidRoll :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2431039343248957719##
                   221184297327378359##
                   Bowling.$trModule
                   Bowling.$tc'InvalidRoll1) -}
2f2bf7387df16ba71fe4b4c4bd920b69
  $tc'InvalidRoll1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InvalidRoll"#) -}
9c7ee7704c0b4c27af708c3d13a3c5f6
  $tcBowlingError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12177706345455547190##
                   2229604509349638745##
                   Bowling.$trModule
                   Bowling.$tcBowlingError1) -}
94d2f703f3bb3db0efc5aad4aba28cac
  $tcBowlingError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BowlingError"#) -}
c7acf39e8178f612c9b863db8832d180
  $tcInnerState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5318323645817119920##
                   11017790552081209459##
                   Bowling.$trModule
                   Bowling.$tcInnerState1) -}
92cec79511355724d450c78ee6245a64
  $tcInnerState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "InnerState"#) -}
628684f7a473f31dd1dc68a326778e8d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Bowling.$trModule2
                   Bowling.$trModule1) -}
038efb4fd70147addf3a4f2f5929d835
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bowling"#) -}
bed4f22640e132c7fa1d3dd28166da95
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "bowling-0.0.0-8c9T8Bt3o2H6123g8iYJ1B"#) -}
368c5b4ad467cd333f8102d8b6592027
  $w$c== ::
    GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><S,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Bool)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Types.Int)
                   (ww8 :: GHC.Types.Bool)
                   (ww9 :: GHC.Types.Int)
                   (ww10 :: GHC.Types.Int)
                   (ww11 :: GHC.Types.Int)
                   (ww12 :: GHC.Types.Int)
                   (ww13 :: GHC.Types.Int)
                   (ww14 :: GHC.Types.Bool)
                   (ww15 :: GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case ww2 of wild { GHC.Types.I# x ->
                     case ww10 of wild1 { GHC.Types.I# y ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.==# x y) of wild2 {
                       GHC.Types.False -> GHC.Types.False
                       GHC.Types.True
                       -> case ww3 of wild3 { GHC.Types.I# x1 ->
                          case ww11 of wild4 { GHC.Types.I# y1 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# x1 y1) of wild5 {
                            GHC.Types.False -> GHC.Types.False
                            GHC.Types.True
                            -> case ww4 of wild6 { GHC.Types.I# x2 ->
                               case ww12 of wild7 { GHC.Types.I# y2 ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# x2 y2) of wild8 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> case ww5 of wild9 { GHC.Types.I# x3 ->
                                    case ww13 of wild10 { GHC.Types.I# y3 ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x3 y3) of wild11 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case ww6 of wild12 {
                                           GHC.Types.False
                                           -> case ww14 of wild13 {
                                                GHC.Types.False -> GHC.Classes.eqInt ww7 ww15
                                                GHC.Types.True -> GHC.Types.False }
                                           GHC.Types.True
                                           -> case ww14 of wild13 {
                                                GHC.Types.False -> GHC.Types.False
                                                GHC.Types.True
                                                -> GHC.Classes.eqInt
                                                     ww7
                                                     ww15 } } } } } } } } } } } } } }
                 } in
                 case ww of wild {
                   GHC.Types.False
                   -> case ww8 of wild1 {
                        GHC.Types.False
                        -> case ww1 of wild2 { GHC.Types.I# x ->
                           case ww9 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> $j GHC.Prim.void# } } }
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True
                   -> case ww8 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww1 of wild2 { GHC.Types.I# x ->
                           case ww9 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> $j GHC.Prim.void# } } } } }) -}
8fde3eebd1bee44ae47c7cad9ec6c60f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 10,
     Strictness: <S,U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(U)><L,U>,
     Inline: [0] -}
e7a4a142552e23751d2ae25933b159d1
  $wscore' ::
    [GHC.Types.Int]
    -> Bowling.InnerState
    -> (# Data.Either.Either Bowling.BowlingError GHC.Types.Int,
          Bowling.InnerState #)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U,U,U(U),U(U),U,U(U))>,
     Inline: [0] -}
0a36e41af989f0d524ac7aeae019105e
  data BowlingError
    = IncompleteGame
    | InvalidRoll {rollIndex :: GHC.Types.Int,
                   rollValue :: GHC.Types.Int}
1da7d757cf5049360717e566f70ec3f0
  data InnerState
    = IS {_spare :: GHC.Types.Bool,
          _strike :: GHC.Types.Int,
          _total :: GHC.Types.Int,
          _partial :: GHC.Types.Int,
          _frame :: GHC.Types.Int,
          _roll :: GHC.Types.Int,
          _start :: GHC.Types.Bool,
          _bonus :: GHC.Types.Int}
875efb2109f509bde8de0886ca4b3494
  _bonus :: Bowling.InnerState -> GHC.Types.Int
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
1c4f6062f75102f489998e84f4f56af7
  _frame :: Bowling.InnerState -> GHC.Types.Int
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
5b15d18d7e2079f8273134139ac7ba69
  _partial :: Bowling.InnerState -> GHC.Types.Int
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
41b44e8fd22013e4e48f52a65d322e61
  _roll :: Bowling.InnerState -> GHC.Types.Int
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
9502b9875117a97cb92e81bf8cd19a05
  _spare :: Bowling.InnerState -> GHC.Types.Bool
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
7909969817b892784da6823c08a56a85
  _start :: Bowling.InnerState -> GHC.Types.Bool
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
d8f4dfa39571e5cf1eee8bf4a67625d5
  _strike :: Bowling.InnerState -> GHC.Types.Int
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
87bb5575045b7860682a66cb64f671fc
  _total :: Bowling.InnerState -> GHC.Types.Int
  RecSel Left Bowling.InnerState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.InnerState) ->
                 case ds of wild { Bowling.IS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
9a85efe118c7c1138a03adc68a6e72a0
  defaultState :: Bowling.InnerState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Bowling.IS
                   GHC.Types.False
                   Bowling.$fShowBowlingError2
                   Bowling.$fShowBowlingError2
                   Bowling.$fShowBowlingError2
                   Bowling.$fShowBowlingError2
                   Bowling.$fShowBowlingError2
                   GHC.Types.True
                   Bowling.$fShowBowlingError2) -}
472530d589d7d3d277ca46e24fb6df1f
  rollIndex :: Bowling.BowlingError -> GHC.Types.Int
  RecSel Left Bowling.BowlingError
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.BowlingError) ->
                 case ds of wild {
                   Bowling.IncompleteGame -> Bowling.rollIndex1
                   Bowling.InvalidRoll ds1 ds2 -> ds1 }) -}
1fac99cc2980d8478d1cf477626799d5
  rollIndex1 :: GHC.Types.Int
  {- Strictness: x -}
d2505efc4749a165267d9ebbc0b3e16d
  rollValue :: Bowling.BowlingError -> GHC.Types.Int
  RecSel Left Bowling.BowlingError
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Bowling.BowlingError) ->
                 case ds of wild {
                   Bowling.IncompleteGame -> Bowling.rollValue1
                   Bowling.InvalidRoll ds1 ds2 -> ds2 }) -}
8e86c1f7a9c7ea4ee0e739680fa5e0d3
  rollValue1 :: GHC.Types.Int
  {- Strictness: x -}
c68bcafc46b4ef445646ca77c270a513
  score ::
    [GHC.Types.Int]
    -> Data.Either.Either Bowling.BowlingError GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (r :: [GHC.Types.Int]) ->
                 case (Bowling.score1 r Bowling.defaultState)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <(Data.Either.Either Bowling.BowlingError GHC.Types.Int,
                             Bowling.InnerState)>_R) of wild { (,) x ds1 ->
                 x }) -}
3795864b94ef80a929983db1db999f43
  score1 ::
    [GHC.Types.Int]
    -> Bowling.InnerState
    -> Data.Functor.Identity.Identity
         (Data.Either.Either Bowling.BowlingError GHC.Types.Int,
          Bowling.InnerState)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U,U,U(U),U(U),U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [GHC.Types.Int]) (w1 :: Bowling.InnerState) ->
                 case Bowling.$wscore' w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(Data.Either.Either Bowling.BowlingError GHC.Types.Int,
                             Bowling.InnerState)>_R)) }) -}
instance GHC.Classes.Eq [Bowling.BowlingError]
  = Bowling.$fEqBowlingError
instance GHC.Classes.Eq [Bowling.InnerState]
  = Bowling.$fEqInnerState
instance GHC.Show.Show [Bowling.BowlingError]
  = Bowling.$fShowBowlingError
instance GHC.Show.Show [Bowling.InnerState]
  = Bowling.$fShowInnerState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

